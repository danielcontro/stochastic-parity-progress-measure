# Generated from Prism.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,47,345,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,5,1,5,
        1,5,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,
        1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,
        1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,
        1,22,1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,
        1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,
        1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,
        1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,
        1,34,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,
        1,37,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,5,40,251,8,40,
        10,40,12,40,254,9,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,
        1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
        5,41,278,8,41,10,41,12,41,281,9,41,1,41,1,41,1,41,1,41,1,42,1,42,
        1,42,1,42,1,42,1,42,1,42,5,42,294,8,42,10,42,12,42,297,9,42,1,42,
        1,42,1,42,1,42,1,43,1,43,1,43,1,43,5,43,307,8,43,10,43,12,43,310,
        9,43,1,43,3,43,313,8,43,1,43,1,43,1,43,1,43,1,44,4,44,320,8,44,11,
        44,12,44,321,1,44,1,44,1,45,1,45,5,45,328,8,45,10,45,12,45,331,9,
        45,1,46,4,46,334,8,46,11,46,12,46,335,1,46,1,46,4,46,340,8,46,11,
        46,12,46,341,3,46,344,8,46,1,252,0,47,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,
        81,41,83,42,85,43,87,44,89,45,91,46,93,47,1,0,6,1,0,59,59,2,0,10,
        10,13,13,3,0,9,10,13,13,32,32,2,0,65,90,97,122,4,0,48,57,65,90,95,
        95,97,122,1,0,48,57,354,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
        1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
        1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
        1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
        1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,
        1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,1,95,1,0,0,0,3,97,
        1,0,0,0,5,99,1,0,0,0,7,101,1,0,0,0,9,104,1,0,0,0,11,106,1,0,0,0,
        13,109,1,0,0,0,15,111,1,0,0,0,17,114,1,0,0,0,19,116,1,0,0,0,21,118,
        1,0,0,0,23,120,1,0,0,0,25,122,1,0,0,0,27,124,1,0,0,0,29,128,1,0,
        0,0,31,133,1,0,0,0,33,137,1,0,0,0,35,142,1,0,0,0,37,149,1,0,0,0,
        39,155,1,0,0,0,41,157,1,0,0,0,43,159,1,0,0,0,45,161,1,0,0,0,47,163,
        1,0,0,0,49,166,1,0,0,0,51,168,1,0,0,0,53,170,1,0,0,0,55,173,1,0,
        0,0,57,175,1,0,0,0,59,177,1,0,0,0,61,183,1,0,0,0,63,190,1,0,0,0,
        65,200,1,0,0,0,67,207,1,0,0,0,69,211,1,0,0,0,71,215,1,0,0,0,73,217,
        1,0,0,0,75,222,1,0,0,0,77,228,1,0,0,0,79,233,1,0,0,0,81,241,1,0,
        0,0,83,268,1,0,0,0,85,286,1,0,0,0,87,302,1,0,0,0,89,319,1,0,0,0,
        91,325,1,0,0,0,93,333,1,0,0,0,95,96,5,38,0,0,96,2,1,0,0,0,97,98,
        5,124,0,0,98,4,1,0,0,0,99,100,5,61,0,0,100,6,1,0,0,0,101,102,5,33,
        0,0,102,103,5,61,0,0,103,8,1,0,0,0,104,105,5,60,0,0,105,10,1,0,0,
        0,106,107,5,60,0,0,107,108,5,61,0,0,108,12,1,0,0,0,109,110,5,62,
        0,0,110,14,1,0,0,0,111,112,5,62,0,0,112,113,5,61,0,0,113,16,1,0,
        0,0,114,115,5,45,0,0,115,18,1,0,0,0,116,117,5,43,0,0,117,20,1,0,
        0,0,118,119,5,42,0,0,119,22,1,0,0,0,120,121,5,47,0,0,121,24,1,0,
        0,0,122,123,5,33,0,0,123,26,1,0,0,0,124,125,5,109,0,0,125,126,5,
        100,0,0,126,127,5,112,0,0,127,28,1,0,0,0,128,129,5,100,0,0,129,130,
        5,116,0,0,130,131,5,109,0,0,131,132,5,99,0,0,132,30,1,0,0,0,133,
        134,5,105,0,0,134,135,5,110,0,0,135,136,5,116,0,0,136,32,1,0,0,0,
        137,138,5,98,0,0,138,139,5,111,0,0,139,140,5,111,0,0,140,141,5,108,
        0,0,141,34,1,0,0,0,142,143,5,100,0,0,143,144,5,111,0,0,144,145,5,
        117,0,0,145,146,5,98,0,0,146,147,5,108,0,0,147,148,5,101,0,0,148,
        36,1,0,0,0,149,150,5,102,0,0,150,151,5,108,0,0,151,152,5,111,0,0,
        152,153,5,97,0,0,153,154,5,116,0,0,154,38,1,0,0,0,155,156,5,91,0,
        0,156,40,1,0,0,0,157,158,5,93,0,0,158,42,1,0,0,0,159,160,5,40,0,
        0,160,44,1,0,0,0,161,162,5,41,0,0,162,46,1,0,0,0,163,164,5,45,0,
        0,164,165,5,62,0,0,165,48,1,0,0,0,166,167,5,59,0,0,167,50,1,0,0,
        0,168,169,5,58,0,0,169,52,1,0,0,0,170,171,5,46,0,0,171,172,5,46,
        0,0,172,54,1,0,0,0,173,174,5,44,0,0,174,56,1,0,0,0,175,176,5,34,
        0,0,176,58,1,0,0,0,177,178,5,99,0,0,178,179,5,111,0,0,179,180,5,
        110,0,0,180,181,5,115,0,0,181,182,5,116,0,0,182,60,1,0,0,0,183,184,
        5,109,0,0,184,185,5,111,0,0,185,186,5,100,0,0,186,187,5,117,0,0,
        187,188,5,108,0,0,188,189,5,101,0,0,189,62,1,0,0,0,190,191,5,101,
        0,0,191,192,5,110,0,0,192,193,5,100,0,0,193,194,5,109,0,0,194,195,
        5,111,0,0,195,196,5,100,0,0,196,197,5,117,0,0,197,198,5,108,0,0,
        198,199,5,101,0,0,199,64,1,0,0,0,200,201,5,103,0,0,201,202,5,108,
        0,0,202,203,5,111,0,0,203,204,5,98,0,0,204,205,5,97,0,0,205,206,
        5,108,0,0,206,66,1,0,0,0,207,208,5,109,0,0,208,209,5,105,0,0,209,
        210,5,110,0,0,210,68,1,0,0,0,211,212,5,109,0,0,212,213,5,97,0,0,
        213,214,5,120,0,0,214,70,1,0,0,0,215,216,5,39,0,0,216,72,1,0,0,0,
        217,218,5,116,0,0,218,219,5,114,0,0,219,220,5,117,0,0,220,221,5,
        101,0,0,221,74,1,0,0,0,222,223,5,102,0,0,223,224,5,97,0,0,224,225,
        5,108,0,0,225,226,5,115,0,0,226,227,5,101,0,0,227,76,1,0,0,0,228,
        229,5,105,0,0,229,230,5,110,0,0,230,231,5,105,0,0,231,232,5,116,
        0,0,232,78,1,0,0,0,233,234,5,101,0,0,234,235,5,110,0,0,235,236,5,
        100,0,0,236,237,5,105,0,0,237,238,5,110,0,0,238,239,5,105,0,0,239,
        240,5,116,0,0,240,80,1,0,0,0,241,242,5,114,0,0,242,243,5,101,0,0,
        243,244,5,119,0,0,244,245,5,97,0,0,245,246,5,114,0,0,246,247,5,100,
        0,0,247,248,5,115,0,0,248,252,1,0,0,0,249,251,9,0,0,0,250,249,1,
        0,0,0,251,254,1,0,0,0,252,253,1,0,0,0,252,250,1,0,0,0,253,255,1,
        0,0,0,254,252,1,0,0,0,255,256,5,101,0,0,256,257,5,110,0,0,257,258,
        5,100,0,0,258,259,5,114,0,0,259,260,5,101,0,0,260,261,5,119,0,0,
        261,262,5,97,0,0,262,263,5,114,0,0,263,264,5,100,0,0,264,265,5,115,
        0,0,265,266,1,0,0,0,266,267,6,40,0,0,267,82,1,0,0,0,268,269,5,102,
        0,0,269,270,5,111,0,0,270,271,5,114,0,0,271,272,5,109,0,0,272,273,
        5,117,0,0,273,274,5,108,0,0,274,275,5,97,0,0,275,279,1,0,0,0,276,
        278,8,0,0,0,277,276,1,0,0,0,278,281,1,0,0,0,279,277,1,0,0,0,279,
        280,1,0,0,0,280,282,1,0,0,0,281,279,1,0,0,0,282,283,5,59,0,0,283,
        284,1,0,0,0,284,285,6,41,0,0,285,84,1,0,0,0,286,287,5,108,0,0,287,
        288,5,97,0,0,288,289,5,98,0,0,289,290,5,101,0,0,290,291,5,108,0,
        0,291,295,1,0,0,0,292,294,8,0,0,0,293,292,1,0,0,0,294,297,1,0,0,
        0,295,293,1,0,0,0,295,296,1,0,0,0,296,298,1,0,0,0,297,295,1,0,0,
        0,298,299,5,59,0,0,299,300,1,0,0,0,300,301,6,42,0,0,301,86,1,0,0,
        0,302,303,5,47,0,0,303,304,5,47,0,0,304,308,1,0,0,0,305,307,8,1,
        0,0,306,305,1,0,0,0,307,310,1,0,0,0,308,306,1,0,0,0,308,309,1,0,
        0,0,309,312,1,0,0,0,310,308,1,0,0,0,311,313,5,13,0,0,312,311,1,0,
        0,0,312,313,1,0,0,0,313,314,1,0,0,0,314,315,5,10,0,0,315,316,1,0,
        0,0,316,317,6,43,0,0,317,88,1,0,0,0,318,320,7,2,0,0,319,318,1,0,
        0,0,320,321,1,0,0,0,321,319,1,0,0,0,321,322,1,0,0,0,322,323,1,0,
        0,0,323,324,6,44,0,0,324,90,1,0,0,0,325,329,7,3,0,0,326,328,7,4,
        0,0,327,326,1,0,0,0,328,331,1,0,0,0,329,327,1,0,0,0,329,330,1,0,
        0,0,330,92,1,0,0,0,331,329,1,0,0,0,332,334,7,5,0,0,333,332,1,0,0,
        0,334,335,1,0,0,0,335,333,1,0,0,0,335,336,1,0,0,0,336,343,1,0,0,
        0,337,339,5,46,0,0,338,340,7,5,0,0,339,338,1,0,0,0,340,341,1,0,0,
        0,341,339,1,0,0,0,341,342,1,0,0,0,342,344,1,0,0,0,343,337,1,0,0,
        0,343,344,1,0,0,0,344,94,1,0,0,0,11,0,252,279,295,308,312,321,329,
        335,341,343,1,6,0,0
    ]

class PrismLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    AND = 1
    OR = 2
    EQ = 3
    NE = 4
    LT = 5
    LE = 6
    GT = 7
    GE = 8
    MINUS = 9
    PLUS = 10
    TIMES = 11
    DIV = 12
    NOT = 13
    MDP = 14
    DTMC = 15
    INT = 16
    BOOL = 17
    DOUBLE = 18
    FLOAT = 19
    LBRA = 20
    RBRA = 21
    LPAR = 22
    RPAR = 23
    TO = 24
    SEMICOLON = 25
    COLON = 26
    RANGE = 27
    COMMA = 28
    DOUBLE_QUOTE = 29
    CONST = 30
    MODULE = 31
    ENDMODULE = 32
    GLOBAL = 33
    MIN = 34
    MAX = 35
    PRIME = 36
    TRUE = 37
    FALSE = 38
    INIT = 39
    ENDINIT = 40
    REWARDS = 41
    FORMULA = 42
    LABEL = 43
    COMMENT = 44
    WS = 45
    ID = 46
    NUMBER = 47

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'&'", "'|'", "'='", "'!='", "'<'", "'<='", "'>'", "'>='", "'-'", 
            "'+'", "'*'", "'/'", "'!'", "'mdp'", "'dtmc'", "'int'", "'bool'", 
            "'double'", "'float'", "'['", "']'", "'('", "')'", "'->'", "';'", 
            "':'", "'..'", "','", "'\"'", "'const'", "'module'", "'endmodule'", 
            "'global'", "'min'", "'max'", "'''", "'true'", "'false'", "'init'", 
            "'endinit'" ]

    symbolicNames = [ "<INVALID>",
            "AND", "OR", "EQ", "NE", "LT", "LE", "GT", "GE", "MINUS", "PLUS", 
            "TIMES", "DIV", "NOT", "MDP", "DTMC", "INT", "BOOL", "DOUBLE", 
            "FLOAT", "LBRA", "RBRA", "LPAR", "RPAR", "TO", "SEMICOLON", 
            "COLON", "RANGE", "COMMA", "DOUBLE_QUOTE", "CONST", "MODULE", 
            "ENDMODULE", "GLOBAL", "MIN", "MAX", "PRIME", "TRUE", "FALSE", 
            "INIT", "ENDINIT", "REWARDS", "FORMULA", "LABEL", "COMMENT", 
            "WS", "ID", "NUMBER" ]

    ruleNames = [ "AND", "OR", "EQ", "NE", "LT", "LE", "GT", "GE", "MINUS", 
                  "PLUS", "TIMES", "DIV", "NOT", "MDP", "DTMC", "INT", "BOOL", 
                  "DOUBLE", "FLOAT", "LBRA", "RBRA", "LPAR", "RPAR", "TO", 
                  "SEMICOLON", "COLON", "RANGE", "COMMA", "DOUBLE_QUOTE", 
                  "CONST", "MODULE", "ENDMODULE", "GLOBAL", "MIN", "MAX", 
                  "PRIME", "TRUE", "FALSE", "INIT", "ENDINIT", "REWARDS", 
                  "FORMULA", "LABEL", "COMMENT", "WS", "ID", "NUMBER" ]

    grammarFileName = "Prism.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


