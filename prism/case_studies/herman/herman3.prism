dtmc

const double p = 0.5;

module process1process2process3
    x1 : [0 .. 1];
    x2 : [0 .. 1];
    x3 : [0 .. 1];

    [step] x1 = x3 & (x2 = x1 & x3 = x2) -> p * (p * p):(x1' = 0) & (x2' = 0) & (x3' = 0) + p * (p * (1 - p)):(x1' = 0) & (x2' = 0) & (x3' = 1) + p * ((1 - p) * p):(x1' = 0) & (x2' = 1) & (x3' = 0) + p * ((1 - p) * (1 - p)):(x1' = 0) & (x2' = 1) & (x3' = 1) + (1 - p) * (p * p):(x1' = 1) & (x2' = 0) & (x3' = 0) + (1 - p) * (p * (1 - p)):(x1' = 1) & (x2' = 0) & (x3' = 1) + (1 - p) * ((1 - p) * p):(x1' = 1) & (x2' = 1) & (x3' = 0) + (1 - p) * ((1 - p) * (1 - p)):(x1' = 1) & (x2' = 1) & (x3' = 1);
    [step] x1 = x3 & (x2 = x1 & !x3 = x2) -> p * p:(x1' = 0) & (x2' = 0) & (x3' = x2) + p * (1 - p):(x1' = 0) & (x2' = 1) & (x3' = x2) + (1 - p) * p:(x1' = 1) & (x2' = 0) & (x3' = x2) + (1 - p) * (1 - p):(x1' = 1) & (x2' = 1) & (x3' = x2);
    [step] x1 = x3 & (!x2 = x1 & x3 = x2) -> p * p:(x1' = 0) & (x2' = x1) & (x3' = 0) + p * (1 - p):(x1' = 0) & (x2' = x1) & (x3' = 1) + (1 - p) * p:(x1' = 1) & (x2' = x1) & (x3' = 0) + (1 - p) * (1 - p):(x1' = 1) & (x2' = x1) & (x3' = 1);
    [step] x1 = x3 & (!x2 = x1 & !x3 = x2) -> p:(x1' = 0) & (x2' = x1) & (x3' = x2) + 1 - p:(x1' = 1) & (x2' = x1) & (x3' = x2);
    [step] !x1 = x3 & (x2 = x1 & x3 = x2) -> p * p:(x1' = x3) & (x2' = 0) & (x3' = 0) + p * (1 - p):(x1' = x3) & (x2' = 0) & (x3' = 1) + (1 - p) * p:(x1' = x3) & (x2' = 1) & (x3' = 0) + (1 - p) * (1 - p):(x1' = x3) & (x2' = 1) & (x3' = 1);
    [step] !x1 = x3 & (x2 = x1 & !x3 = x2) -> p:(x1' = x3) & (x2' = 0) & (x3' = x2) + 1 - p:(x1' = x3) & (x2' = 1) & (x3' = x2);
    [step] !x1 = x3 & (!x2 = x1 & x3 = x2) -> p:(x1' = x3) & (x2' = x1) & (x3' = 0) + 1 - p:(x1' = x3) & (x2' = x1) & (x3' = 1);
    [step] !x1 = x3 & (!x2 = x1 & !x3 = x2) -> (x1' = x3) & (x2' = x1) & (x3' = x2);
endmodule

rewards "steps"
    true : 1;
endrewards

init
    true
endinit

formula num_tokens = ((x1 = x2 ? 1 : 0) + (x2 = x3 ? 1 : 0)) + (x3 = x1 ? 1 : 0);
// As DNF: (x1=x2 & x1!=x3) | (x2=x3 & x1 != x2) | (x3 = x1 & x1 != x2)
//
// Negated formula:
// !(x1=x2 & x1!=x3) & !(x2=x3 & x1 != x2) & !(x3 = x1 & x1 != x2)
// (x1!=x2 | x1=x3) & (x2!=x3 | x1 = x2) & (x3 != x1 & x1 = x2)
// ... (removing unfeasible guards)
// (x1!=x2 & x2!=x3) & x3 != x1
// (x1=x3 & x1 = x2) & x1 = x2

label "stable" = num_tokens = 1;

